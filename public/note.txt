---------------------Time Department store to DB in Specific time interval---------------------------------------------

<?php

namespace App\Http\Controllers\General_Controller;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Auth;
use App\Http\Requests\ScheduleRequest;
use Carbon\Carbon;
use Carbon\CarbonPeriod;
use App\Models\Schedule;


class ScheduleController extends Controller
{

    public function index()
    {
        $user = Auth::user();
        $doctor = $user->doctor;
        $department = $doctor->departments;
        $schedules = $doctor->schedules;
        return view('general_dashboard.doctor_dashboard.schedule.index',compact('doctor','department','schedules'));
    }

    public function create()
    {
        return view('general_dashboard.doctor_dashboard.schedule.create-schedule');
    }


    public function store(ScheduleRequest $request)
    {
        // $fromTime = $request->from;
        // $toTime = $request->to;

        // $start_time = Carbon::createFromFormat('H:i', $fromTime);
        // $end_time = Carbon::createFromFormat('H:i', $toTime);

        // // Create a period of 30-minute intervals between start and end times
        // $period = CarbonPeriod::create($start_time, '30 minutes', $end_time);
        // $departed_schedule = [];
        // foreach ($period as $interval) {
        //     $departed_schedule[] = $interval->format('H:i');
        // }
        // $grouped_schedule = collect($departed_schedule)
        //                     ->slice(0, -1)
        //                     ->map(function ($item, $key) use ($departed_schedule){
        //                 return[
        //                     'from' => $item,
        //                     'to' => $departed_schedule[$key + 1]
        //                 ];
        //             });
        // // dd($grouped_schedule);
        // $user = Auth::user();
        // $doctor = $user->doctor;
        // $doctor_id = $doctor->id;
        // foreach ($grouped_schedule as $schedule) {
        //     $schedule['doctor_id'] = $doctor_id;
        //     $schedule['in'] = $request->in;
        //     Schedule::create($schedule);
        // }
        return redirect()->route('my-schedule.index')->with('message','Your Schedule has been set successfully !!!');
    }


    public function show($id)
    {
        //
    }


    public function edit($id)
    {
        // $schedule = Schedule::where('id', $id)->first();
        // $date = $schedule->in;
        // $time_interval = Schedule::where('in', $date)->get();

        // // Fetching the first element of the first array
        // $start_time = $time_interval->first()['from'];

        // // Fetching the last element of the last array
        // $end_time = $time_interval->last()['to'];

        // // dd($start_time . ' - ' . $end_time);
        // return view('general_dashboard.doctor_dashboard.schedule.edit-schedule',
        //     compact('date','start_time','end_time'));
    }


    public function update(ScheduleRequest $request, $id)
    {
        $validatedData = $request->validated();
        Schedule::where('id', $id)->update($validatedData);
        return redirect()->route('my-schedule.index')->with('message','Your Schedule has been updated successfully !!!');
    }


    public function destroy($id)
    {
        // $schedule = Schedule::where('id', $id)->first();
        // $date = $schedule->in;
        // Schedule::whereDate('in', $date)->delete();
        // return redirect()->route('my-schedule.index')->with('success_message','Your Schedule has been deleted successfully !!!');
    }
}


-----------------------In Blade File doctorSchedule.blade.php--------------------------------------
@foreach($schedules as $schedule)
<tr>
    <td>{{ $loop->index + $schedules->firstItem() }}</td>
    <td><img width="28" height="28" src="{{ asset($schedule->doctor->profile )}}" class="rounded-circle m-r-5" alt="">Dr. {{ $schedule->doctor->first_name }} {{ $schedule->doctor->middle_name }} {{ $schedule->doctor->last_name }}</td>
    <td>{{ $schedule->doctor->departments->department_name }}</td>
    <td>{{ $schedule->in }}</td>

    <td>
        @foreach( $schedule->time_intervals as $interval )
            {{ $interval }}
        @endforeach
    </td>

    <td>
        @if($schedule->appointment)
            @if($schedule->appointment->status === 'approved')
            <span class="custom-badge status-green">Approved</span>
            @elseif($schedule->appointment->status === 'pending')
            <span class="custom-badge status-purple">Pending</span>
            @else
            <span class="custom-badge status-red">Cancelled</span>
            @endif
        @else
        <span class="custom-badge status-grey">Opened</span>
        @endif
    </td>
    <td>
        <a href="#" style="font-size: 20px;"><i class="fa fa-pencil-square-o mr-2" aria-hidden="true"></i></a>
        <a href="#" data-toggle="modal" data-target="#delete_schedule" style="font-size: 25px; color: red;"><i class="fa fa-trash-o" aria-hidden="true"></i></a>
    </td>
</tr>
@endforeach
